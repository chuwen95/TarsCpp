// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.13.
// **********************************************************************

#ifndef __REGISTRY_H_
#define __REGISTRY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "NodeDescriptor.h"
#include "RegistryDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct PatchResult : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.PatchResult";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        PatchResult()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sApplication = "";
            sServerName = "";
            sNodeName = "";
            sVersion = "";
            sUserName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sApplication, 0);
            _os.write(sServerName, 1);
            _os.write(sNodeName, 2);
            _os.write(sVersion, 3);
            _os.write(sUserName, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sApplication, 0, true);
            _is.read(sServerName, 1, true);
            _is.read(sNodeName, 2, true);
            _is.read(sVersion, 3, true);
            _is.read(sUserName, 4, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["sApplication"] = tars::JsonOutput::writeJson(sApplication);
            p->value["sServerName"] = tars::JsonOutput::writeJson(sServerName);
            p->value["sNodeName"] = tars::JsonOutput::writeJson(sNodeName);
            p->value["sVersion"] = tars::JsonOutput::writeJson(sVersion);
            p->value["sUserName"] = tars::JsonOutput::writeJson(sUserName);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(sApplication,pObj->value["sApplication"], true);
            tars::JsonInput::readJson(sServerName,pObj->value["sServerName"], true);
            tars::JsonInput::readJson(sNodeName,pObj->value["sNodeName"], true);
            tars::JsonInput::readJson(sVersion,pObj->value["sVersion"], true);
            tars::JsonInput::readJson(sUserName,pObj->value["sUserName"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sApplication,"sApplication");
            _ds.display(sServerName,"sServerName");
            _ds.display(sNodeName,"sNodeName");
            _ds.display(sVersion,"sVersion");
            _ds.display(sUserName,"sUserName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sApplication, true);
            _ds.displaySimple(sServerName, true);
            _ds.displaySimple(sNodeName, true);
            _ds.displaySimple(sVersion, true);
            _ds.displaySimple(sUserName, false);
            return _os;
        }
    public:
        std::string sApplication;
        std::string sServerName;
        std::string sNodeName;
        std::string sVersion;
        std::string sUserName;
    };
    inline bool operator==(const PatchResult&l, const PatchResult&r)
    {
        return l.sApplication == r.sApplication && l.sServerName == r.sServerName && l.sNodeName == r.sNodeName && l.sVersion == r.sVersion && l.sUserName == r.sUserName;
    }
    inline bool operator!=(const PatchResult&l, const PatchResult&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const PatchResult&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,PatchResult&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct BaseImageInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.BaseImageInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        BaseImageInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            id = "";
            image = "";
            registryId = "";
            sha = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (id != "")
            {
                _os.write(id, 0);
            }
            if (image != "")
            {
                _os.write(image, 1);
            }
            if (registryId != "")
            {
                _os.write(registryId, 2);
            }
            if (sha != "")
            {
                _os.write(sha, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(image, 1, false);
            _is.read(registryId, 2, false);
            _is.read(sha, 3, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["id"] = tars::JsonOutput::writeJson(id);
            p->value["image"] = tars::JsonOutput::writeJson(image);
            p->value["registryId"] = tars::JsonOutput::writeJson(registryId);
            p->value["sha"] = tars::JsonOutput::writeJson(sha);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(id,pObj->value["id"], false);
            tars::JsonInput::readJson(image,pObj->value["image"], false);
            tars::JsonInput::readJson(registryId,pObj->value["registryId"], false);
            tars::JsonInput::readJson(sha,pObj->value["sha"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(image,"image");
            _ds.display(registryId,"registryId");
            _ds.display(sha,"sha");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(image, true);
            _ds.displaySimple(registryId, true);
            _ds.displaySimple(sha, false);
            return _os;
        }
    public:
        std::string id;
        std::string image;
        std::string registryId;
        std::string sha;
    };
    inline bool operator==(const BaseImageInfo&l, const BaseImageInfo&r)
    {
        return l.id == r.id && l.image == r.image && l.registryId == r.registryId && l.sha == r.sha;
    }
    inline bool operator!=(const BaseImageInfo&l, const BaseImageInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const BaseImageInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,BaseImageInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct DockerRegistry : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.DockerRegistry";
        }
        static string MD5()
        {
            return "65fb1eb3e00269f618240b25c7ea8ddb";
        }
        DockerRegistry()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sId = "";
            sRegistry = "";
            sUserName = "";
            sPassword = "";
            bSucc = false;
            baseImages.clear();
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (sId != "")
            {
                _os.write(sId, 0);
            }
            if (sRegistry != "")
            {
                _os.write(sRegistry, 1);
            }
            if (sUserName != "")
            {
                _os.write(sUserName, 2);
            }
            if (sPassword != "")
            {
                _os.write(sPassword, 3);
            }
            if (bSucc != false)
            {
                _os.write(bSucc, 4);
            }
            if (baseImages.size() > 0)
            {
                _os.write(baseImages, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sId, 0, false);
            _is.read(sRegistry, 1, false);
            _is.read(sUserName, 2, false);
            _is.read(sPassword, 3, false);
            _is.read(bSucc, 4, false);
            _is.read(baseImages, 5, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["sId"] = tars::JsonOutput::writeJson(sId);
            p->value["sRegistry"] = tars::JsonOutput::writeJson(sRegistry);
            p->value["sUserName"] = tars::JsonOutput::writeJson(sUserName);
            p->value["sPassword"] = tars::JsonOutput::writeJson(sPassword);
            p->value["bSucc"] = tars::JsonOutput::writeJson(bSucc);
            p->value["baseImages"] = tars::JsonOutput::writeJson(baseImages);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(sId,pObj->value["sId"], false);
            tars::JsonInput::readJson(sRegistry,pObj->value["sRegistry"], false);
            tars::JsonInput::readJson(sUserName,pObj->value["sUserName"], false);
            tars::JsonInput::readJson(sPassword,pObj->value["sPassword"], false);
            tars::JsonInput::readJson(bSucc,pObj->value["bSucc"], false);
            tars::JsonInput::readJson(baseImages,pObj->value["baseImages"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sId,"sId");
            _ds.display(sRegistry,"sRegistry");
            _ds.display(sUserName,"sUserName");
            _ds.display(sPassword,"sPassword");
            _ds.display(bSucc,"bSucc");
            _ds.display(baseImages,"baseImages");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(sRegistry, true);
            _ds.displaySimple(sUserName, true);
            _ds.displaySimple(sPassword, true);
            _ds.displaySimple(bSucc, true);
            _ds.displaySimple(baseImages, false);
            return _os;
        }
    public:
        std::string sId;
        std::string sRegistry;
        std::string sUserName;
        std::string sPassword;
        tars::Bool bSucc;
        vector<tars::BaseImageInfo> baseImages;
    };
    inline bool operator==(const DockerRegistry&l, const DockerRegistry&r)
    {
        return l.sId == r.sId && l.sRegistry == r.sRegistry && l.sUserName == r.sUserName && l.sPassword == r.sPassword && l.bSucc == r.bSucc && l.baseImages == r.baseImages;
    }
    inline bool operator!=(const DockerRegistry&l, const DockerRegistry&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const DockerRegistry&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,DockerRegistry&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct FrameworkKey : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.FrameworkKey";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FrameworkKey()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            cuid = "";
            priKey = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (cuid != "")
            {
                _os.write(cuid, 0);
            }
            if (priKey != "")
            {
                _os.write(priKey, 1);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cuid, 0, false);
            _is.read(priKey, 1, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["cuid"] = tars::JsonOutput::writeJson(cuid);
            p->value["priKey"] = tars::JsonOutput::writeJson(priKey);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(cuid,pObj->value["cuid"], false);
            tars::JsonInput::readJson(priKey,pObj->value["priKey"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(cuid,"cuid");
            _ds.display(priKey,"priKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(cuid, true);
            _ds.displaySimple(priKey, false);
            return _os;
        }
    public:
        std::string cuid;
        std::string priKey;
    };
    inline bool operator==(const FrameworkKey&l, const FrameworkKey&r)
    {
        return l.cuid == r.cuid && l.priKey == r.priKey;
    }
    inline bool operator!=(const FrameworkKey&l, const FrameworkKey&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const FrameworkKey&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,FrameworkKey&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class RegistryPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallback(){}
        virtual void callback_destroyNode(tars::Int32 ret)
        { throw std::runtime_error("callback_destroyNode() override incorrect."); }
        virtual void callback_destroyNode_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_destroyNode_exception() override incorrect."); }

        virtual void callback_dockerPull(tars::Int32 ret)
        { throw std::runtime_error("callback_dockerPull() override incorrect."); }
        virtual void callback_dockerPull_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_dockerPull_exception() override incorrect."); }

        virtual void callback_getClientIp(tars::Int32 ret,  const std::string& sClientIp)
        { throw std::runtime_error("callback_getClientIp() override incorrect."); }
        virtual void callback_getClientIp_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getClientIp_exception() override incorrect."); }
        virtual void callback_getClientIp(tars::Int32 ret, std::string&&  sClientIp)
        { callback_getClientIp(ret, sClientIp); }

        virtual void callback_getDockerRegistry(tars::Int32 ret,  const vector<tars::DockerRegistry>& doctorRegistries)
        { throw std::runtime_error("callback_getDockerRegistry() override incorrect."); }
        virtual void callback_getDockerRegistry_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getDockerRegistry_exception() override incorrect."); }
        virtual void callback_getDockerRegistry(tars::Int32 ret, vector<tars::DockerRegistry>&&  doctorRegistries)
        { callback_getDockerRegistry(ret, doctorRegistries); }

        virtual void callback_getFrameworkKey(tars::Int32 ret,  const tars::FrameworkKey& fKey)
        { throw std::runtime_error("callback_getFrameworkKey() override incorrect."); }
        virtual void callback_getFrameworkKey_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getFrameworkKey_exception() override incorrect."); }
        virtual void callback_getFrameworkKey(tars::Int32 ret, tars::FrameworkKey&&  fKey)
        { callback_getFrameworkKey(ret, fKey); }

        virtual void callback_getNodeTemplate(tars::Int32 ret,  const std::string& profileTemplate)
        { throw std::runtime_error("callback_getNodeTemplate() override incorrect."); }
        virtual void callback_getNodeTemplate_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getNodeTemplate_exception() override incorrect."); }
        virtual void callback_getNodeTemplate(tars::Int32 ret, std::string&&  profileTemplate)
        { callback_getNodeTemplate(ret, profileTemplate); }

        virtual void callback_getServers(const vector<tars::ServerDescriptor>& ret)
        { throw std::runtime_error("callback_getServers() override incorrect."); }
        virtual void callback_getServers_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getServers_exception() override incorrect."); }
        virtual void callback_getServers(vector<tars::ServerDescriptor>&& ret)
        { callback_getServers(ret); }

        virtual void callback_keepAlive(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_registerNode(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode() override incorrect."); }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode_exception() override incorrect."); }

        virtual void callback_reportNode(tars::Int32 ret)
        { throw std::runtime_error("callback_reportNode() override incorrect."); }
        virtual void callback_reportNode_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_reportNode_exception() override incorrect."); }

        virtual void callback_reportVersion(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

        virtual void callback_updatePatchResult(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult() override incorrect."); }
        virtual void callback_updatePatchResult_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult_exception() override incorrect."); }

        virtual void callback_updateServer(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer() override incorrect."); }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer_exception() override incorrect."); }

        virtual void callback_updateServerBatch(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch() override incorrect."); }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };
            auto it = _msg_->response->status.find("TARS_FUNC");
            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+14, (it==_msg_->response->status.end())?_msg_->request.sFuncName:it->second);
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_destroyNode(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_dockerPull(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string sClientIp;
                    _is.read(sClientIp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getClientIp(_ret, std::move(sClientIp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::DockerRegistry> doctorRegistries;
                    _is.read(doctorRegistries, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getDockerRegistry(_ret, std::move(doctorRegistries));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    tars::FrameworkKey fKey;
                    _is.read(fKey, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getFrameworkKey(_ret, std::move(fKey));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string profileTemplate;
                    _is.read(profileTemplate, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getNodeTemplate(_ret, std::move(profileTemplate));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    vector<tars::ServerDescriptor> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getServers(std::move(_ret));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_registerNode(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_reportNode(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 10:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_reportVersion(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 11:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_updatePatchResult(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 12:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_updateServer(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 13:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_updateServerBatch(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallback> RegistryPrxCallbackPtr;

    //callback of promise async proxy for client
    class RegistryPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallbackPromise(){}
    public:
        struct PromisedestroyNode: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisedestroyNode > PromisedestroyNodePtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > &promise)
        : _promise_destroyNode(promise)
        {}
        
        virtual void callback_destroyNode(const RegistryPrxCallbackPromise::PromisedestroyNodePtr &ptr)
        {
            _promise_destroyNode.setValue(ptr);
        }
        virtual void callback_destroyNode_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:destroyNode_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_destroyNode.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > _promise_destroyNode;

    public:
        struct PromisedockerPull: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisedockerPull > PromisedockerPullPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > &promise)
        : _promise_dockerPull(promise)
        {}
        
        virtual void callback_dockerPull(const RegistryPrxCallbackPromise::PromisedockerPullPtr &ptr)
        {
            _promise_dockerPull.setValue(ptr);
        }
        virtual void callback_dockerPull_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:dockerPull_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_dockerPull.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > _promise_dockerPull;

    public:
        struct PromisegetClientIp: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string sClientIp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetClientIp > PromisegetClientIpPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > &promise)
        : _promise_getClientIp(promise)
        {}
        
        virtual void callback_getClientIp(const RegistryPrxCallbackPromise::PromisegetClientIpPtr &ptr)
        {
            _promise_getClientIp.setValue(ptr);
        }
        virtual void callback_getClientIp_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getClientIp_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getClientIp.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > _promise_getClientIp;

    public:
        struct PromisegetDockerRegistry: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::DockerRegistry> doctorRegistries;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetDockerRegistry > PromisegetDockerRegistryPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > &promise)
        : _promise_getDockerRegistry(promise)
        {}
        
        virtual void callback_getDockerRegistry(const RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr &ptr)
        {
            _promise_getDockerRegistry.setValue(ptr);
        }
        virtual void callback_getDockerRegistry_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getDockerRegistry_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getDockerRegistry.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > _promise_getDockerRegistry;

    public:
        struct PromisegetFrameworkKey: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            tars::FrameworkKey fKey;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetFrameworkKey > PromisegetFrameworkKeyPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > &promise)
        : _promise_getFrameworkKey(promise)
        {}
        
        virtual void callback_getFrameworkKey(const RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr &ptr)
        {
            _promise_getFrameworkKey.setValue(ptr);
        }
        virtual void callback_getFrameworkKey_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getFrameworkKey_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getFrameworkKey.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > _promise_getFrameworkKey;

    public:
        struct PromisegetNodeTemplate: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string profileTemplate;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetNodeTemplate > PromisegetNodeTemplatePtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > &promise)
        : _promise_getNodeTemplate(promise)
        {}
        
        virtual void callback_getNodeTemplate(const RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr &ptr)
        {
            _promise_getNodeTemplate.setValue(ptr);
        }
        virtual void callback_getNodeTemplate_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getNodeTemplate_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getNodeTemplate.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > _promise_getNodeTemplate;

    public:
        struct PromisegetServers: virtual public TC_HandleBase
        {
        public:
            vector<tars::ServerDescriptor> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetServers > PromisegetServersPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > &promise)
        : _promise_getServers(promise)
        {}
        
        virtual void callback_getServers(const RegistryPrxCallbackPromise::PromisegetServersPtr &ptr)
        {
            _promise_getServers.setValue(ptr);
        }
        virtual void callback_getServers_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getServers_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getServers.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > _promise_getServers;

    public:
        struct PromisekeepAlive: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const RegistryPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAlive.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromiseregisterNode: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseregisterNode > PromiseregisterNodePtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > &promise)
        : _promise_registerNode(promise)
        {}
        
        virtual void callback_registerNode(const RegistryPrxCallbackPromise::PromiseregisterNodePtr &ptr)
        {
            _promise_registerNode.setValue(ptr);
        }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNode_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerNode.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > _promise_registerNode;

    public:
        struct PromisereportNode: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisereportNode > PromisereportNodePtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisereportNodePtr > &promise)
        : _promise_reportNode(promise)
        {}
        
        virtual void callback_reportNode(const RegistryPrxCallbackPromise::PromisereportNodePtr &ptr)
        {
            _promise_reportNode.setValue(ptr);
        }
        virtual void callback_reportNode_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:reportNode_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportNode.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisereportNodePtr > _promise_reportNode;

    public:
        struct PromisereportVersion: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const RegistryPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportVersion.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        struct PromiseupdatePatchResult: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdatePatchResult > PromiseupdatePatchResultPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > &promise)
        : _promise_updatePatchResult(promise)
        {}
        
        virtual void callback_updatePatchResult(const RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr &ptr)
        {
            _promise_updatePatchResult.setValue(ptr);
        }
        virtual void callback_updatePatchResult_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updatePatchResult_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updatePatchResult.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > _promise_updatePatchResult;

    public:
        struct PromiseupdateServer: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServer > PromiseupdateServerPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > &promise)
        : _promise_updateServer(promise)
        {}
        
        virtual void callback_updateServer(const RegistryPrxCallbackPromise::PromiseupdateServerPtr &ptr)
        {
            _promise_updateServer.setValue(ptr);
        }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServer_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServer.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > _promise_updateServer;

    public:
        struct PromiseupdateServerBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServerBatch > PromiseupdateServerBatchPtr;

        RegistryPrxCallbackPromise(const tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > &promise)
        : _promise_updateServerBatch(promise)
        {}
        
        virtual void callback_updateServerBatch(const RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr &ptr)
        {
            _promise_updateServerBatch.setValue(ptr);
        }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServerBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServerBatch.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > _promise_updateServerBatch;

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+14, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisedestroyNodePtr ptr = new RegistryPrxCallbackPromise::PromisedestroyNode();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroyNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroyNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_destroyNode(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisedockerPullPtr ptr = new RegistryPrxCallbackPromise::PromisedockerPull();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_dockerPull_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_dockerPull_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_dockerPull(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetClientIpPtr ptr = new RegistryPrxCallbackPromise::PromisegetClientIp();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sClientIp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getClientIp(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr ptr = new RegistryPrxCallbackPromise::PromisegetDockerRegistry();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->doctorRegistries, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getDockerRegistry_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getDockerRegistry_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getDockerRegistry(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr ptr = new RegistryPrxCallbackPromise::PromisegetFrameworkKey();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->fKey, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getFrameworkKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getFrameworkKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getFrameworkKey(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr ptr = new RegistryPrxCallbackPromise::PromisegetNodeTemplate();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->profileTemplate, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getNodeTemplate(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetServersPtr ptr = new RegistryPrxCallbackPromise::PromisegetServers();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getServers(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAlivePtr ptr = new RegistryPrxCallbackPromise::PromisekeepAlive();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_keepAlive(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodePtr ptr = new RegistryPrxCallbackPromise::PromiseregisterNode();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_registerNode(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisereportNodePtr ptr = new RegistryPrxCallbackPromise::PromisereportNode();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_reportNode(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 10:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisereportVersionPtr ptr = new RegistryPrxCallbackPromise::PromisereportVersion();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_reportVersion(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 11:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr ptr = new RegistryPrxCallbackPromise::PromiseupdatePatchResult();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_updatePatchResult(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 12:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServer();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_updateServer(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 13:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServerBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_updateServerBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallbackPromise> RegistryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class RegistryCoroPrxCallback: public RegistryPrxCallback
    {
    public:
        virtual ~RegistryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+14, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_destroyNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroyNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroyNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_dockerPull(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_dockerPull_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_dockerPull_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string sClientIp;
                        _is.read(sClientIp, 1, true);
                        setResponseContext(_msg_->response->context);

                        callback_getClientIp(_ret, std::move(sClientIp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::DockerRegistry> doctorRegistries;
                        _is.read(doctorRegistries, 1, true);
                        setResponseContext(_msg_->response->context);

                        callback_getDockerRegistry(_ret, std::move(doctorRegistries));

                    }
                    catch(std::exception &ex)
                    {
                        callback_getDockerRegistry_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getDockerRegistry_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        tars::FrameworkKey fKey;
                        _is.read(fKey, 1, true);
                        setResponseContext(_msg_->response->context);

                        callback_getFrameworkKey(_ret, std::move(fKey));

                    }
                    catch(std::exception &ex)
                    {
                        callback_getFrameworkKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getFrameworkKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string profileTemplate;
                        _is.read(profileTemplate, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_getNodeTemplate(_ret, std::move(profileTemplate));

                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        vector<tars::ServerDescriptor> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_getServers(std::move(_ret));

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_registerNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNode_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_reportNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 10:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_reportVersion(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 11:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_updatePatchResult(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 12:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_updateServer(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 13:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_updateServerBatch(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<RegistryCoroPrxCallback> RegistryCoroPrxCallbackPtr;

    /* proxy for client */
    class RegistryProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 destroyNode(const std::string & nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"destroyNode", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_destroyNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroyNode", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisedestroyNodePtr > promise_async_destroyNode(const std::string &nodeName,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroyNode", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_destroyNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroyNode", _os, context, _mStatus, callback, true);
        }

        tars::Int32 dockerPull(const std::string & baseImageId,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"dockerPull", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_dockerPull(RegistryPrxCallbackPtr callback,const std::string &baseImageId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"dockerPull", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisedockerPullPtr > promise_async_dockerPull(const std::string &baseImageId,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"dockerPull", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_dockerPull(RegistryCoroPrxCallbackPtr callback,const std::string &baseImageId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"dockerPull", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getClientIp(std::string &sClientIp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(sClientIp, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getClientIp", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sClientIp, 1, true);
            return _ret;
        }

        void async_getClientIp(RegistryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise_async_getClientIp(const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getClientIp(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getDockerRegistry(vector<tars::DockerRegistry> &doctorRegistries,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(doctorRegistries, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getDockerRegistry", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(doctorRegistries, 1, true);
            return _ret;
        }

        void async_getDockerRegistry(RegistryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getDockerRegistry", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > promise_async_getDockerRegistry(const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getDockerRegistry", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getDockerRegistry(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getDockerRegistry", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getFrameworkKey(tars::FrameworkKey &fKey,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(fKey, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getFrameworkKey", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(fKey, 1, true);
            return _ret;
        }

        void async_getFrameworkKey(RegistryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getFrameworkKey", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > promise_async_getFrameworkKey(const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getFrameworkKey", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getFrameworkKey(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getFrameworkKey", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(profileTemplate, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getNodeTemplate", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(profileTemplate, 2, true);
            return _ret;
        }

        void async_getNodeTemplate(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise_async_getNodeTemplate(const std::string &nodeName,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getNodeTemplate(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os, context, _mStatus, callback, true);
        }

        vector<tars::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getServers", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            vector<tars::ServerDescriptor> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getServers(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisegetServersPtr > promise_async_getServers(const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getServers(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os, context, _mStatus, callback, true);
        }

        tars::Int32 keepAlive(const std::string & nodeName,const tars::LoadInfo & load,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"keepAlive", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(RegistryPrxCallbackPtr callback,const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os, context, _mStatus, callback, true);
        }

        tars::Int32 registerNode(const std::string & nodeName,const tars::NodeInfo & ni,const tars::LoadInfo & li,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"registerNode", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise_async_registerNode(const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os, context, _mStatus, callback, true);
        }

        tars::Int32 reportNode(const tars::ReportNode & rn,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(rn, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"reportNode", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportNode(RegistryPrxCallbackPtr callback,const tars::ReportNode &rn,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(rn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportNode", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisereportNodePtr > promise_async_reportNode(const tars::ReportNode &rn,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisereportNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(rn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportNode", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportNode(RegistryCoroPrxCallbackPtr callback,const tars::ReportNode &rn,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(rn, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportNode", _os, context, _mStatus, callback, true);
        }

        tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"reportVersion", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportVersion(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportVersion(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os, context, _mStatus, callback, true);
        }

        tars::Int32 updatePatchResult(const tars::PatchResult & result,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"updatePatchResult", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updatePatchResult(RegistryPrxCallbackPtr callback,const tars::PatchResult &result,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise_async_updatePatchResult(const tars::PatchResult &result,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updatePatchResult(RegistryCoroPrxCallbackPtr callback,const tars::PatchResult &result,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os, context, _mStatus, callback, true);
        }

        tars::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const tars::ServerStateInfo & state,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"updateServer", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServer(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise_async_updateServer(const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServer(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os, context, _mStatus, callback, true);
        }

        tars::Int32 updateServerBatch(const vector<tars::ServerStateInfo> & vState,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"updateServerBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServerBatch(RegistryPrxCallbackPtr callback,const vector<tars::ServerStateInfo> &vState,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os, context, _mStatus, callback);
        }
        
        tars::Future< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise_async_updateServerBatch(const vector<tars::ServerStateInfo> &vState,const map<string, string>& context)
        {
            tars::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServerBatch(RegistryCoroPrxCallbackPtr callback,const vector<tars::ServerStateInfo> &vState,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os, context, _mStatus, callback, true);
        }

        RegistryProxy* tars_hash(uint32_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_hash(key);
        }

        RegistryProxy* tars_consistent_hash(uint32_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_consistent_hash(key);
        }

        RegistryProxy* tars_open_trace(bool traceParam = false)
        {
            return (RegistryProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        RegistryProxy* tars_set_timeout(int msecond)
        {
            return (RegistryProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "RegistryProxy"; }
    };
    typedef tars::TC_AutoPtr<RegistryProxy> RegistryPrx;

    /* servant for server */
    class Registry : public tars::Servant
    {
    public:
        virtual ~Registry(){}
        virtual tars::Int32 destroyNode(const std::string & nodeName,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 destroyNode(std::string && nodeName,tars::TarsCurrentPtr _current_) 
        { return destroyNode(nodeName, _current_); }
        static void async_response_destroyNode(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_destroyNode(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"destroyNode", _os, _context);
            }
        }

        virtual tars::Int32 dockerPull(const std::string & baseImageId,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 dockerPull(std::string && baseImageId,tars::TarsCurrentPtr _current_) 
        { return dockerPull(baseImageId, _current_); }
        static void async_response_dockerPull(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_dockerPull(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"dockerPull", _os, _context);
            }
        }

        virtual tars::Int32 getClientIp(std::string &sClientIp,tars::TarsCurrentPtr _current_) = 0;
        static void async_response_getClientIp(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &sClientIp)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("sClientIp", sClientIp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["sClientIp"] = tars::JsonOutput::writeJson(sClientIp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(sClientIp, 1);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_getClientIp(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &sClientIp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(sClientIp, 1);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getClientIp", _os, _context);
            }
        }

        virtual tars::Int32 getDockerRegistry(vector<tars::DockerRegistry> &doctorRegistries,tars::TarsCurrentPtr _current_) = 0;
        static void async_response_getDockerRegistry(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::DockerRegistry> &doctorRegistries)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("doctorRegistries", doctorRegistries);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["doctorRegistries"] = tars::JsonOutput::writeJson(doctorRegistries);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(doctorRegistries, 1);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_getDockerRegistry(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::DockerRegistry> &doctorRegistries, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(doctorRegistries, 1);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getDockerRegistry", _os, _context);
            }
        }

        virtual tars::Int32 getFrameworkKey(tars::FrameworkKey &fKey,tars::TarsCurrentPtr _current_) = 0;
        static void async_response_getFrameworkKey(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const tars::FrameworkKey &fKey)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("fKey", fKey);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["fKey"] = tars::JsonOutput::writeJson(fKey);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(fKey, 1);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_getFrameworkKey(tars::CurrentPtr _current_, tars::Int32 _ret, const tars::FrameworkKey &fKey, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(fKey, 1);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getFrameworkKey", _os, _context);
            }
        }

        virtual tars::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 getNodeTemplate(std::string && nodeName,std::string &profileTemplate,tars::TarsCurrentPtr _current_) 
        { return getNodeTemplate(nodeName, profileTemplate, _current_); }
        static void async_response_getNodeTemplate(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &profileTemplate)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("profileTemplate", profileTemplate);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["profileTemplate"] = tars::JsonOutput::writeJson(profileTemplate);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(profileTemplate, 2);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_getNodeTemplate(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &profileTemplate, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(profileTemplate, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getNodeTemplate", _os, _context);
            }
        }

        virtual vector<tars::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,tars::TarsCurrentPtr _current_) = 0;
        virtual vector<tars::ServerDescriptor> getServers(std::string && app,std::string && serverName,std::string && nodeName,tars::TarsCurrentPtr _current_) 
        { return getServers(app, serverName, nodeName, _current_); }
        static void async_response_getServers(tars::TarsCurrentPtr _current_, const vector<tars::ServerDescriptor> &_ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_getServers(tars::CurrentPtr _current_, const vector<tars::ServerDescriptor> &_ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getServers", _os, _context);
            }
        }

        virtual tars::Int32 keepAlive(const std::string & nodeName,const tars::LoadInfo & load,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 keepAlive(std::string && nodeName,tars::LoadInfo && load,tars::TarsCurrentPtr _current_) 
        { return keepAlive(nodeName, load, _current_); }
        static void async_response_keepAlive(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_keepAlive(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"keepAlive", _os, _context);
            }
        }

        virtual tars::Int32 registerNode(const std::string & nodeName,const tars::NodeInfo & ni,const tars::LoadInfo & li,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 registerNode(std::string && nodeName,tars::NodeInfo && ni,tars::LoadInfo && li,tars::TarsCurrentPtr _current_) 
        { return registerNode(nodeName, ni, li, _current_); }
        static void async_response_registerNode(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_registerNode(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"registerNode", _os, _context);
            }
        }

        virtual tars::Int32 reportNode(const tars::ReportNode & rn,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 reportNode(tars::ReportNode && rn,tars::TarsCurrentPtr _current_) 
        { return reportNode(rn, _current_); }
        static void async_response_reportNode(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_reportNode(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"reportNode", _os, _context);
            }
        }

        virtual tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 reportVersion(std::string && app,std::string && serverName,std::string && nodeName,std::string && version,tars::TarsCurrentPtr _current_) 
        { return reportVersion(app, serverName, nodeName, version, _current_); }
        static void async_response_reportVersion(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_reportVersion(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"reportVersion", _os, _context);
            }
        }

        virtual tars::Int32 updatePatchResult(const tars::PatchResult & result,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 updatePatchResult(tars::PatchResult && result,tars::TarsCurrentPtr _current_) 
        { return updatePatchResult(result, _current_); }
        static void async_response_updatePatchResult(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_updatePatchResult(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"updatePatchResult", _os, _context);
            }
        }

        virtual tars::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const tars::ServerStateInfo & state,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 updateServer(std::string && app,std::string && serverName,std::string && nodeName,tars::ServerStateInfo && state,tars::TarsCurrentPtr _current_) 
        { return updateServer(app, serverName, nodeName, state, _current_); }
        static void async_response_updateServer(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_updateServer(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"updateServer", _os, _context);
            }
        }

        virtual tars::Int32 updateServerBatch(const vector<tars::ServerStateInfo> & vState,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 updateServerBatch(vector<tars::ServerStateInfo> && vState,tars::TarsCurrentPtr _current_) 
        { return updateServerBatch(vState, _current_); }
        static void async_response_updateServerBatch(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
        }
        static void async_response_push_updateServerBatch(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"updateServerBatch", _os, _context);
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__tars__Registry_all, __tars__Registry_all+14, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Registry_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("nodeName", nodeName);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                    }
                    tars::Int32 _ret = destroyNode(std::move(nodeName), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string baseImageId;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("baseImageId", baseImageId);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(baseImageId, _jsonPtr->value["baseImageId"], true);
                    }
                    else
                    {
                        _is.read(baseImageId, 1, true);
                    }
                    tars::Int32 _ret = dockerPull(std::move(baseImageId), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sClientIp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.getByDefault("sClientIp", sClientIp, sClientIp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(sClientIp, _jsonPtr->value["sClientIp"], false);
                    }
                    else
                    {
                        _is.read(sClientIp, 1, false);
                    }
                    tars::Int32 _ret = getClientIp(sClientIp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("sClientIp", sClientIp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["sClientIp"] = tars::JsonOutput::writeJson(sClientIp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(sClientIp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<tars::DockerRegistry> doctorRegistries;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.getByDefault("doctorRegistries", doctorRegistries, doctorRegistries);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(doctorRegistries, _jsonPtr->value["doctorRegistries"], false);
                    }
                    else
                    {
                        _is.read(doctorRegistries, 1, false);
                    }
                    tars::Int32 _ret = getDockerRegistry(doctorRegistries, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("doctorRegistries", doctorRegistries);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["doctorRegistries"] = tars::JsonOutput::writeJson(doctorRegistries);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(doctorRegistries, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::FrameworkKey fKey;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.getByDefault("fKey", fKey, fKey);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(fKey, _jsonPtr->value["fKey"], false);
                    }
                    else
                    {
                        _is.read(fKey, 1, false);
                    }
                    tars::Int32 _ret = getFrameworkKey(fKey, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("fKey", fKey);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["fKey"] = tars::JsonOutput::writeJson(fKey);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(fKey, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    std::string profileTemplate;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("nodeName", nodeName);
                        _tarsAttr_.getByDefault("profileTemplate", profileTemplate, profileTemplate);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        tars::JsonInput::readJson(profileTemplate, _jsonPtr->value["profileTemplate"], false);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(profileTemplate, 2, false);
                    }
                    tars::Int32 _ret = getNodeTemplate(std::move(nodeName),profileTemplate, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("profileTemplate", profileTemplate);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["profileTemplate"] = tars::JsonOutput::writeJson(profileTemplate);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(profileTemplate, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("app", app);
                        _tarsAttr_.get("serverName", serverName);
                        _tarsAttr_.get("nodeName", nodeName);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                    }
                    vector<tars::ServerDescriptor> _ret = getServers(std::move(app),std::move(serverName),std::move(nodeName), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    tars::LoadInfo load;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("nodeName", nodeName);
                        _tarsAttr_.get("load", load);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        tars::JsonInput::readJson(load, _jsonPtr->value["load"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(load, 2, true);
                    }
                    tars::Int32 _ret = keepAlive(std::move(nodeName),std::move(load), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    tars::NodeInfo ni;
                    tars::LoadInfo li;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("nodeName", nodeName);
                        _tarsAttr_.get("ni", ni);
                        _tarsAttr_.get("li", li);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        tars::JsonInput::readJson(ni, _jsonPtr->value["ni"], true);
                        tars::JsonInput::readJson(li, _jsonPtr->value["li"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(ni, 2, true);
                        _is.read(li, 3, true);
                    }
                    tars::Int32 _ret = registerNode(std::move(nodeName),std::move(ni),std::move(li), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ReportNode rn;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("rn", rn);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(rn, _jsonPtr->value["rn"], true);
                    }
                    else
                    {
                        _is.read(rn, 1, true);
                    }
                    tars::Int32 _ret = reportNode(std::move(rn), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 10:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    std::string version;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("app", app);
                        _tarsAttr_.get("serverName", serverName);
                        _tarsAttr_.get("nodeName", nodeName);
                        _tarsAttr_.get("version", version);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        tars::JsonInput::readJson(version, _jsonPtr->value["version"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(version, 4, true);
                    }
                    tars::Int32 _ret = reportVersion(std::move(app),std::move(serverName),std::move(nodeName),std::move(version), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 11:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::PatchResult result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("result", result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(result, _jsonPtr->value["result"], true);
                    }
                    else
                    {
                        _is.read(result, 1, true);
                    }
                    tars::Int32 _ret = updatePatchResult(std::move(result), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 12:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    tars::ServerStateInfo state;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("app", app);
                        _tarsAttr_.get("serverName", serverName);
                        _tarsAttr_.get("nodeName", nodeName);
                        _tarsAttr_.get("state", state);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        tars::JsonInput::readJson(state, _jsonPtr->value["state"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(state, 4, true);
                    }
                    tars::Int32 _ret = updateServer(std::move(app),std::move(serverName),std::move(nodeName),std::move(state), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 13:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<tars::ServerStateInfo> vState;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("vState", vState);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(vState, _jsonPtr->value["vState"], true);
                    }
                    else
                    {
                        _is.read(vState, 1, true);
                    }
                    tars::Int32 _ret = updateServerBatch(std::move(vState), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
